# -*- org -*-
#+TITLE: Notes on Using Amazon AWS PowerShell Cmdlets (or CLI Commands) to Maintain a Static S3 Website
#+COLUMNS: %8TODO %10WHO %3PRIORITY %3HOURS(HRS) %80ITEM
#+OPTIONS: author:nil creator:t H:9
#+HTML_HEAD: <link href="https://fonts.googleapis.com/css?family=IBM+Plex+Mono|IBM+Plex+Sans" rel="stylesheet">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode.css" />
#+HTML_HEAD: <link href="/styles/toc.css" rel="stylesheet" type="text/css">
#+HTML_HEAD: <script src="/scripts/jquery-3.3.1.js" type="text/javascript"></script>
#+HTML_HEAD: <script src="/scripts/toc-manipulation.js" type="text/javascript"></script>

# See org-mode explainer at the bottom of this file.

/(HTML generated from org-mode text file.)/

* Overview 

  Some dumb notes on maintaining a static website as an S3 bucket.  To be refined as I figure out more than just the
  absolute basics.

  Note that "CLI" here means the AWS CLI, which is implemented as a set of Python scripts.

** Documentation

   https://docs.aws.amazon.com/cli/index.html (includes both Python and PowerShell CLIs).

* Simplest possible basics

** Set up credentials

*** Download access keys from AWS (if you haven't already)

    You only get one chance to do this, but you can always create new keys if you need to.

    In the AWS (web) console:

    Go to IAM | Users | /specific user/ | Security credentials | Create access key (button)

    After you've done this, you'll have the opportunity to download the keys you just created.

*** Store in AWS credential store

    See https://docs.aws.amazon.com/powershell/latest/userguide/specifying-your-aws-credentials.html#managing-profiles.

    : Set-AWSCredential -AccessKey AKIAIOSFODNN7EXAMPLE -SecretKey wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY -StoreAs MyProfileName

**** CLI

    : aws configure --profile JohnS3

    You will be prompted for access key and secret access key.  The other parameters can be defaulted.
    
*** Choose a credential for the current session (will expire, so you'll have to do it again the next day)
    
    : Set-AWSCredential -ProfileName JohnS3

**** CLI
     :PROPERTIES:
     :CUSTOM_ID: cli-choose-profile
     :END:
     
    For the CLI, set an environment variable:

    : export AWS_PROFILE=JohnS3

***** DONE Test
      CLOSED: [2018-12-09 Sun 12:40]

      - CLOSING NOTE [2018-12-09 Sun 12:40]
      : aws s3 ls s3://tarheel-nc

      (Should result in a directory listing, obviously.)

** Download a bucket

   ~cd~ into the local directory you want to work from.

   #+BEGIN_SRC powershell
     Read-S3Object tarheel-nc -KeyPrefix / -Folder $(pwd) # 'tarheel-nc' being the bucket name.
   #+END_SRC

   *THIS WILL PROBABLY OVERWRITE YOUR CURRENT DIRECTORY CONTENTS* so be sure you know what you're doing.

*** CLI

   : aws cp s3://tarheel-nc . --recursive

   *(UNTESTED)* -- This is /probably/ how it works.  By this point, I'd put the source files into
   Github and found a scheme to maintain the generated files from the sources in git (org-mode
   publish, see [[file:~/Dropbox/Orgzly/hugo.org::#org-mode-publish][org-mode "publish" operation]]).

** Upload a bucket

   (Assuming you set up with the download above.)

   #+BEGIN_SRC powershell
     Write-S3Object tarheel-nc -keyp / $(pwd) -rec -PublicReadOnly
   #+END_SRC 

   *WILL PROBABLY OVERWRITE THE DESTINATION BUCKET*

*** CLI (will not overwrite destination)
    :PROPERTIES:
    :CUSTOM_ID: cli-sync
    :END:

    (Assumes you've already set your profile via environment variable export, [[#cli-choose-profile][as above]], but, if not,
    add the option =--profile JohnS3=.)

    This only copies new and updated files.

    #+BEGIN_SRC powershell
      ls -rec *~ | rm                                   # Cleanup, because "publish" generates these
      aws s3 sync . s3://tarheel-nc --acl public-read
    #+END_SRC

    Or

    #+BEGIN_SRC bash
      find . -iname '*~' | xargs rm -v
      aws s3 sync . s3://tarheel-nc --acl public-read
    #+END_SRC 

**** CLI to totally re-upload a bucket

     If you bollix up the timestamps and want to just start from scratch, do this in the root of the directory you want
     to publish:

     #+BEGIN_SRC powershell
       ls -rec *~ | rm                                   # Cleanup, because "publish" generates these
       aws s3 rm s3://tarheel-nc --recursive             # Blows away the CONTENTS of the bucket
       aws s3 cp . s3://tarheel-nc --recursive --acl public-read # Don't forget the ACL!
     #+END_SRC 

* DONE Figure out how to exclude ~.git~ subdirectory
  CLOSED: [2018-10-21 Sun 16:33]

  - CLOSING NOTE [2018-10-21 Sun 16:33]
  Don't need this if publishing from a source directory to a local destination, and then syncing
  from that directory to S3, but you can probably do it with some variation of an =--exclude= option
  to a command.

* DONE Figure out how to only upload what's changed
  CLOSED: [2018-12-09 Sun 12:41]

  - CLOSING NOTE [2018-12-09 Sun 12:41]
  Based on date?

  Based on what git says is uncommitted?  (Means upload before committing.)

  Answer: =sync= CLI action ([[#cli-sync][CLI (will not overwrite destination)]]).

* COMMENT Org-mode explainer

  Text markup.  More stars means lower-level items.  Blank lines between paragraphs.  Indentation doesn't matter (except
  for lists).  *bold* /italic/ ~code~ =verbatim= (probably should use ~code~ instead of =verbatim=).  [[#maintaining-this-file][Internal link]].
  [[https://google.com][Link to Google]] (although just pasting in a URL works fine, too (see "more info", below)).

  Subscript: H_{2}O (so don't paste in ~code_with_underscores~ w/out surrounding it with ~'s).  (Superscript: E = mc^2.)

  : one-line code sample
  : ok, maybe two lines

  #+BEGIN_EXAMPLE
    Multi-line example
    like maybe a pasted email
    or something you don't want line-wrapping or other /character interpretation/ applied to
  #+END_EXAMPLE 

  Bullet lists:
  
  - one
  - two
    - sub-item (indentation matters here)

  Definitions:
  
  - terms :: Can be defined

  Checklists:
  
  - [ ] Items can be...
  - [X] ...checked off
  - [-] And (dash means "partially completed")
    - [X] you can have sublists
    - [ ] if you really want to

  More info:
  
  - More info than you ever cared for: https://orgmode.org
  - If you truly want to go down the rabbit hole: https://melpa.org/#/?q=org-mode

** Maintaining this file without emacs
   :PROPERTIES:
   :CUSTOM_ID: maintaining-this-file
   :END:

   If you want to update the contents of this file and you're not an emacs user (i.e., you're a normal person), you
   /might/ be able to use pandoc (https://pandoc.org/) to render this text file to whatever format you like.

   See [[*on processing this file with Pandoc][COMMENT on processing this file with Pandoc]].

   (You might also be able to do it by installing emacs and using it as a command-line processor, but I haven't figured
   that out quite yet.)

   Alternatively, you can just DELETE the generated HTML file (including in any repositories where it exists) and update
   this text file without attempting to regenerate the HTML.  In the end, it's just text.

* COMMENT on processing this file with Pandoc
  
  There is a program, ~pandoc~ (https://pandoc.org/), which can be used to turn this org-mode file into whatever you
  want.

  If you do use Pandoc, try the following command line:

  : pandoc --from=org --to=html5 --standalone --table-of-contents --toc-depth=6 --variable=secnumdepth:6 --number-sections --include-in-header=pandoc-header-extra.html --output=<output-html-file> <this-file>
