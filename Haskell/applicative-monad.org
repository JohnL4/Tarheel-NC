# -*- org -*-
#+TITLE: "Applicative Monad" exercise
#+COLUMNS: %8TODO %10WHO %3PRIORITY %3HOURS(HRS) %80ITEM
#+OPTIONS: author:nil creator:t H:9
#+HTML_HEAD: <link href="https://fonts.googleapis.com/css?family=IBM+Plex+Mono|IBM+Plex+Sans" rel="stylesheet">
#+HTML_HEAD: <link href="/org-mode.css" rel="stylesheet" type="text/css">
#+HTML_HEAD: <link href="/styles/toc.css" rel="stylesheet" type="text/css">
#+HTML_HEAD: <script src="/scripts/jquery-3.3.1.js" type="text/javascript"></script>
#+HTML_HEAD: <script src="/scripts/toc-manipulation.js" type="text/javascript"></script>

So, /Learn You a Haskell/ makes this comment, in the chapter on Monads ("A Fistful of Monads"),
shortly before introducing the =banana= function:

#+BEGIN_QUOTE
We couldn't have achieved this by just using Maybe as an applicative. If you try it, you'll get
stuck, because applicative functors don't allow for the applicative values to interact with each
other very much.
#+END_QUOTE

But I did it.  See my GitHub repository at:

- https://github.com/JohnL4/LearnHaskell/blob/main/ApplicativeMonad.hs
- https://github.com/JohnL4/LearnHaskell/blob/main/ApplicativeMonadSpec.hs

(As of the date of this web page, see below.)

The first file is definitions; the second, application/use/test of said definitions.

I didn't actually even use =MMaybe= as an applicative, I don't think.  Hmmm.
