# -*- org -*-
#+TITLE: "Applicative Monad" exercise
#+COLUMNS: %12TODO %10WHO %3PRIORITY(PRI) %3HOURS(HRS){est+} %85ITEM
# #+INFOJS_OPT: view:showall toc:t ltoc:nil path:../org-info.js mouse:#B3F2E3
# Pandoc needs H:9; default is H:3.
# `^:nil' means raw underscores and carets are not interpreted to mean sub- and superscript.  (Use {} to force interpretation.)
#+OPTIONS: author:nil creator:t H:9 ^:{}
#+HTML_HEAD: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=IBM+Plex+Mono:400,400i,600,600i|IBM+Plex+Sans:400,400i,600,600i|IBM+Plex+Serif:400,400i,600,600i">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/org-mode.css" />

# Generates "up" and "home" links ("." is "current directory").  Can comment one out.
#+HTML_LINK_UP: .
#+HTML_LINK_HOME: /index.html

# Use ``#+ATTR_HTML: :class lower-alpha'' on line before list to use the following class.
# See https://emacs.stackexchange.com/a/18943/17421
# 
#+HTML_HEAD: <style type="text/css">
#+HTML_HEAD:  ol.lower-alpha { list-style-type: lower-alpha; }
#+HTML_HEAD: </style>

So, /Learn You a Haskell/ makes this comment, in the chapter on Monads ("A Fistful of Monads"),
shortly before introducing the =banana= function:

#+BEGIN_QUOTE
We couldn't have achieved this by just using Maybe as an applicative. If you try it, you'll get
stuck, because applicative functors don't allow for the applicative values to interact with each
other very much.
#+END_QUOTE

But I did it.  See my GitHub repository at:

- https://github.com/JohnL4/LearnHaskell/blob/main/ApplicativeMonad.hs
- https://github.com/JohnL4/LearnHaskell/blob/main/ApplicativeMonadSpec.hs

(As of the date of this web page, see below.)

The first file is definitions; the second, application/use/test of said definitions.

I didn't actually even use =MMaybe= as an applicative, I don't think.  Hmmm.
