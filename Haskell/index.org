# -*- org -*-
#+TITLE: Notes on Haskell
#+COLUMNS: %12TODO %10WHO %3PRIORITY(PRI) %3HOURS(HRS){est+} %85ITEM
# #+INFOJS_OPT: view:showall toc:t ltoc:nil path:../org-info.js mouse:#B3F2E3
# Pandoc needs H:9; default is H:3.
# `^:nil' means raw underscores and carets are not interpreted to mean sub- and superscript.  (Use {} to force interpretation.)
#+OPTIONS: author:nil creator:t H:9 ^:{}
#+HTML_HEAD: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=IBM+Plex+Mono:400,400i,600,600i|IBM+Plex+Sans:400,400i,600,600i|IBM+Plex+Serif:400,400i,600,600i">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/org-mode.css" />

# Generates "up" and "home" links ("." is "current directory").  Can comment one out.
#+HTML_LINK_UP: .
#+HTML_LINK_HOME: /index.html

# Use ``#+ATTR_HTML: :class lower-alpha'' on line before list to use the following class.
# See https://emacs.stackexchange.com/a/18943/17421
# 
#+HTML_HEAD: <style type="text/css">
#+HTML_HEAD:  ol.lower-alpha { list-style-type: lower-alpha; }
#+HTML_HEAD: </style>

Various notes on various Haskell things, as I climb my Mt. Everest and pursue my Moby Dick.

* Books

- [[http://learnyouahaskell.com/][Learn You a Haskell for Great Good!]] :: This is a great book, light-hearted and yet solid.  When I
     refer to /Learn You a Haskell/, this is the book I'm referring to.
- [[http://book.realworldhaskell.org/][Real World Haskell]] :: Another good book that I've tried to work my way through but got lost.  I
     plan to get back to it when I finish /Learn You a Haskell/.

* Pages
  
# Links must be relative.

  - [[file:zippers.org][zippers.org]] :: (in progress) On creating a Zipper data structure in Haskell

  - [[file:write-a-haskell-program.org][write-a-haskell-program.org]] :: Notes on writing a program (or service), now that I've finally
       finished /Learn You a Haskell/.

  - [[file:../Orgzly/monad-journey.html][../Orgzly/monad-journey.html]] :: Resuming My Journey Toward an Understanding of Haskell Monads
       (Yet Again).  This is basically my notes file as I fight my way through the last three
       chapters of /Learn You a Haskell/.

  - [[file:beginners-guide-to-haskell.org][beginners-guide-to-haskell.org]] :: Because why not?

  - [[file:KnightMoves.pdf][KnightMoves.pdf]] :: A writeup of my attempt to decipher what's going in the /Learn You a Haskell/
       section named "A knight's quest" treating =List= as a monad in determining where a chess
       knight can move.

  - [[file:applicative-monad.org][applicative-monad.org]] :: Exercise in getting Pierre to walk a tightrope from /Learn You a
       Haskell/, based on an offhand comment in the text about not being able to do it with just
       applicative functors.

  - [[file:haskell-newtype-errors.org][haskell-newtype-errors.org]] :: Definition of "Functor" (Notes on Errors Encountered While Trying
       to Use Newtype to Declare a Type an Instance of Functor)
