# -*- org -*-
#+TITLE: Notes on Writing a Haskell Program (or Service)
#+COLUMNS: %12TODO %10WHO %3PRIORITY(PRI) %3HOURS(HRS){est+} %85ITEM
# #+INFOJS_OPT: view:showall toc:t ltoc:nil path:../org-info.js mouse:#B3F2E3
# Pandoc needs H:9; default is H:3.
# `^:nil' means raw underscores and carets are not interpreted to mean sub- and superscript.  (Use {} to force interpretation.)
#+OPTIONS: author:nil creator:t H:9 ^:{}
#+HTML_HEAD: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=IBM+Plex+Mono:400,400i,600,600i|IBM+Plex+Sans:400,400i,600,600i|IBM+Plex+Serif:400,400i,600,600i">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/org-mode.css" />

# Generates "up" and "home" links ("." is "current directory").  Can comment one out.
#+HTML_LINK_UP: .
#+HTML_LINK_HOME: /index.html

# Use ``#+ATTR_HTML: :class lower-alpha'' on line before list to use the following class.
# See https://emacs.stackexchange.com/a/18943/17421
# 
#+HTML_HEAD: <style type="text/css">
#+HTML_HEAD:  ol.lower-alpha { list-style-type: lower-alpha; }
#+HTML_HEAD: </style>

* Overview

  Now that I've finally finished /Learn a Haskell/, I'm ready to write some real functionality in
  Haskell, which requires all sort of setup and configuration.  These are the notes I'll take as I
  go along (I hope).

  The software I hope to write is a function that will return the Delaunay triangulation of a set of
  2-D points.  It currently lives at https://github.com/JohnL4/Delaunay.

  The "or Service" part of this document refers to the fact that functionality written in Haskell
  might not be an entire standalone program, but may instead be a "service" provided to software
  written in other languages (e.g., Java), or might use other software to provide services.  How
  that might be implemented is unknown at the moment, but probably requires some sort of FFI from/to
  Haskell. 

  See also:

  - https://wiki.haskell.org/How_to_write_a_Haskell_program

* Build System
  :PROPERTIES:
  :CUSTOM_ID: build-system
  :END:

  Decided to use Stack, not Cabal.  Stack seems to be based on Cabal and is supposed to guarantee
  reproducible builds, with respect to package versions.  (Supposedly, Cabal can, too, but that
  functionality seems to be more of a bolt-on.)

  See:

  - https://en.wikipedia.org/wiki/Stack_(Haskell)
  - https://docs.haskellstack.org/en/stable/README/

** Mac install

   : stack --version
   : stack upgrade
   : brew update
   : brew upgrade haskell-stack

** Linux install

   Just follow the docs, they worked for me. :)
   
* New Project

  Run:
  
  : stack new project-name

  In the directory that will contain the directory that contains your project (i.e., in the
  directory above the (not-yet-existing) directory that will correspond to your project).

  You can probably either accept the defaults or figure out what the right values are.

  Consider creating your project with a lower-case name and then (if you want) capitalizing the
  directory name (and git repo?) /afterward/.  Lower-case project name will generate a nicer
  package.yaml.

** Licensing

   BSD3 is about as good as MIT.

   Licenses are here:
   https://www.haskell.org/cabal/release/cabal-latest/doc/API/Cabal/Distribution-License.html#t:License 

** Category
   
   For category, pick from one of the top-level Hackage categories, which you can see at
   https://hackage.haskell.org/packages/.

   (For Delaunay, I'm picking "Graphics".)

** Library Structure

   =stack=, by default, creates one library, named "Lib".  If you want to give it a more creative
   name (e.g., "Graphics.Delaunay"), don't forget that module names with dots are expected to
   correspond to directory structures in which each dot-separated component is a directory (except
   the last, which is a file).  So, the code defining module Graphics.Delaunay must reside in
   =Graphics/Delaunay.hs=. 

* Testing

  There seems to be a fair amount of discussion on this, but I like hspec right now.

  You can pop over to [[file:beginners-guide-to-haskell.org::#unit-testing-with-hspec][Unit testing with Hspec]] in [[file:beginners-guide-to-haskell.org][beginners-guide-to-haskell.org]] to steal the syntax,
  but here's how to integrate with the =stack= build system.

** Add hspec to stack config

   (There's probably something similar for cabal, if you chose that.)

   Under "tests", add "hspec" to the dependencies:

   #+BEGIN_SRC yaml
         dependencies:
         - delaunay
         - hspec
   #+END_SRC 
